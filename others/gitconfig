[color]
    branch = auto
    diff = auto
    status = auto
    interactive = auto
    ui = true
    pager = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[core]
    pager = less -FRS
    editor = vim
    autocrlf = false
    whitespace = trailing-space,space-before-tab,cr-at-eol
    # Only use on Windows networks share : git config --local core.filemode false
    # filemode = false

[user]
    # Don't guess the user's (os) identity
    useConfigOnly = true

[init]
    templatedir = ~/dotfiles/public/others/git-templates

[commit]
    template = ~/dotfiles/public/others/git-commit-template

[apply]
    whitespace = nowarn

[status]
    showuntrackedfiles = all

[push]
    default = current

[diff]
    tool = meld

[merge]
    tool = meld

[mergetool "meld"]
    trustExitCode = false

[alias]
    # Show defined aliases
    aliases             = !"git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'"

    # Do everything we can to synchronize all changes
    get                 = !git pull --rebase && git submodule update --init --recursive
    put                 = "!put() { git commit -a -m \"$1\" && git push ; }; put"
    get-put             = "!getput() { git commit -a -m \"$1\" && git pull --rebase && git push && git submodule update --init --recursive ; }; getput"

    # Log
    tree                = log --graph --pretty=oneline --decorate
    pretty-log          = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    change-log          = "!git log --graph --pretty=format:'%Cgreen%cd%Creset -%C(yellow)%d%Creset %s' --abbrev-commit --date=short"

    # Status
    status-short        = status -sb

    # Assume unchanged
    assume              = update-index --assume-unchanged
    unassume            = update-index --no-assume-unchanged
    assumed             = "!git ls-files -v | grep ^h | cut -c 3-"

    # ls-ignored -  list files that git has ignored.
    ls-ignored          = ls-files --others --i --exclude-standard
    ls                  = ls-files

    # Ignore file mode changes
    ignore-filemode     ="!git config --local core.filemode false"

    # Exactly match the remote branch
    full-reset          = "!git fetch origin && git reset --hard origin/master"

    # Publish the current branch to "origin" and set the current branch to track the upstream branch
    publish = !"git push -u origin $(git branch-name)"
    # Unpublish the current branch by deleting the remote version of the current branch on "origin"
    unpublish = !"git push origin :$(git branch-name)"

    # Open changed files
    subl                = !git-ls-files -m -z | xargs -0 subl
    sublall             = !git-ls-files -m -o --exclude-standard -z | xargs -0 subl
